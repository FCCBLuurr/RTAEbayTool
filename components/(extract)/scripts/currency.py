import sys
import os
import json
import pandas as pd
from datetime import datetime
from icecream import ic
from openpyxl import load_workbook
import tkinter as tk
from tkinter import messagebox
from settings.settings_manager import SettingsManager

# Determine the project's root directory dynamically
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
base_dir = os.path.join(project_root, 'RTAEbayTool', 'components', '(extract)')

# Initialize the SettingsManager with the correct path to the settings.json file
settings_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'settings', 'settings.json')
settings_manager = SettingsManager(settings_file)

default_document_directory = settings_manager.get_setting('default_documents_directory', './document')
default_output_directory = settings_manager.get_setting('default_output_directory', './components/(extract)/payload')

def extract_data(filepath):
    try:
        workbook = load_workbook(filename=filepath)
        ic("Sheets in workbook: ", workbook.sheetnames)
        
        ## ----- Data frames go in here ------ ##
        df = pd.read_excel(
            filepath,
            sheet_name='Currency Sheet',
            header=3,
            usecols='A:AI',
            engine='openpyxl'
        )
        
        location_code = pd.read_excel(
            filepath,
            sheet_name='Inventory Sheet',
            usecols='K',
            nrows=1,
            skiprows=1,
            header=None,
            engine='openpyxl'
        ).iat[0,0]
        ic("Location Code:", location_code)
        
        
        ## ---------------------------------- ##
        
        df_filtered = df[(df['Listed?'].isin(['N', pd.NA])) & (df['Category ID'].notna())]

    except Exception as e:
        messagebox.showerror("Error:", e)
        return False

    result = {}
    workbook = load_workbook(filename=filepath)
    sheet = workbook['Currency Sheet']
    
    for index, row in df_filtered.iterrows():
        int_sku = int(float(row['SKU'])) ## Not very pythonic of me
        sku = str(int_sku)
        title = row['Title(Autogenerated)']
        
        description = row['description'] if row['description'].notna() else title
        
        date = row['Date/Series-X'] if row['Date/Series-X'].notna() else ''
        district = row['District'] if row['District'].notna() else ''
        denom = str(row['Denomination'] if row['Denomination'].notna() else '')
        note_nickname = row['Note Nickname'] if row['Note Nickname'].notna() else ''
        currency_type = row['Currency Type'] if row['Currency Type'].notna() else ''
        int_cat = int(float(row['Category ID']))
        cat = str(int_cat)
        seal_or_charter_number = row['Seal/CharterNumber'] if row['Seal/CharterNumber'].notna() else ''
        grade_company = row['Grade Company'] if row['Grade Company'].notna() else ''
        grade = row['Grade'] if row['Grade'].notna() else ''
        grade_designation = row['Paper Quality'] if row['Paper Quality'].notna() else ''
        circulation = 'uncirculated' if row['Grade'].notna() and row['Grade'] > 59 else 'circulated'
        fr_number = row['FR#'] if row['FR#'].notna() else ''
        starting_price = row['Starting Price'] if row['Starting Price'].notna() else ''
        quantity = row['Quantity'] if row['Quantity'].notna() else ''
        schedule_time = row['ScheduleTime'] if row['ScheduleTime'].notna() else ''
        weight_major = row['WeightMajor'] if not pd.isna(row['WeightMajor']) else ''
        weight_minor = row['WeightMinor'] if not pd.isna(row['WeightMinor']) else ''
        package_length = row['PackageLength'] if not pd.isna(row['PackageLength']) else '9'
        package_width = row['PackageWidth'] if not pd.isna(row['PackageWidth']) else '6'
        package_depth = row['PackageDepth'] if not pd.isna(row['PackageDepth']) else '1'
        
        item_data = {
            row['Item#']: {
                "SKU": sku, ## This one is also a pain in the ass, see above for my solution
                "Title": title,
                "Location": f"Shelf: {row['Shelf#']}, Box: {row['Drawer#']}",
                "CategoryID": cat, ##This one is a pain in the ass
                "Item Specifics": {
                    "Description": description,
                    "Date": date,
                    "District": district,
                    "Denomination": denom,
                    "Note Nickname": note_nickname,
                    "Currency Type": currency_type,
                    "Category ID": cat,
                    "Seal/Charter Number": seal_or_charter_number,
                    "Grade Company": grade_company,
                    "Grade": grade,
                    "Grade Designation": grade_designation,
                    "Circulated/Uncirculated": circulation,
                    "FR Number": fr_number,
                    "Starting Price": starting_price,
                    "Quantity": quantity,
                    "Listing Type": row['Listing Type'],
                    "Shipping Profile Name": row['Shipping Profile Name'],
                    "Return Profile Name": row['Return Profile Name'],
                    "Payment Profile Name": row['Payment Profile Name'],
                    "ScheduleTime": str(schedule_time),
                    "PackageLength": package_length,
                    "PackageWidth": package_width,
                    "PackageDepth": package_depth,
                    "WeightMajor": weight_major,
                    "WeightMinor": weight_minor
                },
                "Stats": {
                    "Owner": location_code,
                    "Date Listed": datetime.now().strftime("%Y-%m-%d"),
                    "Time Listed": datetime.now().strftime("%H:%M:%S"),
                }
            }
        }
        result.update(item_data)
        sheet.cell(row=index+5, column=21, value='N') ## Need to implement updating spreadsheet
    
    temp_dir = os.path.join(base_dir, 'temp')
    os.makedirs(temp_dir, exist_ok=True)
    
    if result:
        with open(os.path.join(temp_dir, 'temp.json'), 'w') as json_file:
            json.dump(result, json_file, indent=4)
        ic("Data extracted and saved to a JSON")
    else:
        ic("No data to save, 'Result' is empty")
    
    return workbook, location_code

def load_data_into_payload(workbook, template_path):
    
    temp_dir = os.path.join(base_dir, 'temp')
    os.makedirs(temp_dir, exist_ok=True)
    temp_data_path = os.path.join(temp_dir, 'temp.json')
    photos_data_path = os.path.join(base_dir, 'photos.json')
    
    with open(temp_data_path, 'r') as file:
        temp_data = json.load(file)
    with open(photos_data_path, 'r')as file:
        photos_data = json.load(file)['photos']

    template_workbook = load_workbook(template_path)
    sheet = template_workbook.active
    
    start_row = 5
    current_row = start_row
    
    for key, item in temp_data.items():
        sku = str(int(item['sku']))
        photo_info = photos_data.get(sku)
        photo_url = photo_info.get('url', 'No URL found') if photo_info else 'No SKU match in photos.json'
        
        ## This is where the script pushes data to the payload spreadsheet
        # Set hard-coded and dynamic data in Excel
        sheet[f'A{current_row}'] = "Add"
        sheet[f'B{current_row}'] = key  # Use the complex key for column B
        sheet[f'C{current_row}'] = item['CategoryID']
        sheet[f'E{current_row}'] = item['Title']
        sheet[f'I{current_row}'] = item['Item Specifics']['Starting Price']
        sheet[f'J{current_row}'] = item['Item Specifics']['Quantity']
        sheet[f'N{current_row}'] = item['Item Specifics']['Description']
        sheet[f'O{current_row}'] = item['Item Specifics']['ListingType']
        sheet[f'P{current_row}'] = "GTC" if item['Item Specifics']['ListingType'] == "FixedPrice" else "7"
        sheet[f'V{current_row}'] = "Marietta, GA"
        sheet[f'H{current_row}'] = 0
        sheet[f'AC{current_row}'] = 3
        sheet[f'BA{current_row}'] = "Business"
        sheet[f'AH{current_row}'] = item['Item Specifics']['Shipping Profile Name']
        sheet[f'AI{current_row}'] = item['Item Specifics']['Return Profile Name']
        sheet[f'AJ{current_row}'] = item['Item Specifics']['Payment Profile Name']
        sheet[f'AV{current_row}'] = item['Item Specifics']['Grade Company']
        sheet[f'AW{current_row}'] = item['Item Specifics']['Circulated/Uncirculated']
        sheet[f'AX{current_row}'] = item['Item Specifics']['Date'] #Year
        sheet[f'AZ{current_row}'] = item['Item Specifics']['Denomination']
        sheet[f'BD{current_row}'] = item['Item Specifics']['Grade']
        sheet[f'BE{current_row}'] = item['Item Specifics']['ScheduleTime']
        sheet[f'BF{current_row}'] = item['Item Specifics']['WeightMajor']
        sheet[f'BG{current_row}'] = item['Item Specifics']['WeightMinor']
        sheet[f'BH{current_row}'] = item['Item Specifics']['PackageLength']
        sheet[f'BI{current_row}'] = item['Item Specifics']['PackageWidth']
        sheet[f'BJ{current_row}'] = item['Item Specifics']['PackageDepth']
        sheet[f'K{current_row}'] = photo_url
        sheet[f'BK{current_row}'] = item['Item Specifics']['Grade Designation']

        print(f"Debug: Key - {key}, SKU - {sku}, Retrieved URL - {photo_url}")
        
        current_row += 1
        
    payload_dir = os.path.join(default_output_directory)
    if not os.path.exists(payload_dir):
        os.makedirs(payload_dir, exist_ok=True)
        
    time = datetime.now().strftime("%H%M%S")
    date = datetime.now().strftime("%m%d%Y")
    
    new_filename = f"{location_code}_{date}_{time}ebayupload.xlsx"
    save_path = os.path.join(payload_dir, new_filename)
    
    template_workbook.save(save_path)
    
    ic("Data has been loaded and saved to", save_path)
    ic("File saved as: ", new_filename)
    
if __name__ == '__main__':
    if len(sys.argv) > 1:
        filepath = sys.argv[1]
        workbook, location_code = extract_data(filepath)
        ic("Extraction Status:", workbook is not False)
        if workbook:
            template_path = os.path.join(base_dir, 'ebaytemplate.xlsx')
            load_data_into_payload(workbook, template_path)
            ic("Payload Ready! Happy ebaying :D")
    else:
        print("Please provide a file path as an argument.")
