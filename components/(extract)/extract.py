import pandas as pd
import json
from datetime import datetime
import os
import tkinter as tk
from tkinter import filedialog, messagebox
from icecream import ic  # For better debug outputs
from openpyxl import load_workbook  # For updating the Excel file

base_dir = os.path.join('/Users/ejrta/Documents/Coding Folders/Scripts and Macros/Tools and Workflow Scripts/Flickr&EbayV1', 'components/(extract)')


def extract_data():
    root = tk.Tk()
    root.withdraw()
    initial_dir = '/users/ejrta/Documents/Excel Sheets/Ebay Inventory Sheet'
    file_path = filedialog.askopenfilename(
        title="Select the Excel file",
        initialdir=initial_dir,
        filetypes=(("Excel files", "*.xlsx"), ("All files", "*.*"))
    )
    root.destroy()

    if not file_path:
        return False

    try:
        workbook = load_workbook(filename=file_path)
        ic("Sheets in the workbook:", workbook.sheetnames)
        
        df = pd.read_excel(
            file_path,
            sheet_name='Inventory Sheet',
            header=3,
            usecols='A:AE',
            engine='openpyxl'
        )

        location_code = pd.read_excel(
            file_path,
            sheet_name='Inventory Sheet',
            usecols='K',
            nrows=1,
            skiprows=1,
            header=None,
            engine='openpyxl'
        ).iat[0,0]
        ic("Location Code:", location_code)

        df_filtered = df[(df['Listed?'].isin(['N', pd.NA])) & (df['Category ID'].notna())]

    except Exception as e:
        messagebox.showerror("Error", f"Failed to load the Excel file: {str(e)}")
        return False

    result = {}
    workbook = load_workbook(filename=file_path)
    sheet = workbook['Inventory Sheet']

    for index, row in df_filtered.iterrows():
        description = row['Description'] if row['Description'] is not None else row['Title']
        
        ##This is the solution for the below pain points
        sku = int(float(row['SKU']))
        str_sku = str(sku)
        ##Same solution for category
        cat = int(float(row['Category ID']))
        str_cat = str(cat)
        ##Different solution for denomination
        denom = str(row['Denomination'])
        
        ic("Extracting description:", description)

        item_data = {
            row['Item#']: {
                "SKU": str_sku, ## This one is also a pain in the ass, see above for my solution
                "Title": row['Title(Autogenerated)'],
                "Location": f"Shelf: {row['Shelf/Rack']}, Box: {row['Box#']}",
                "CategoryID": str_cat, ##This one is a pain in the ass
                "Item Specifics": {
                    "Year": row['Year'],
                    "Mint Mark": row['Mint Mark'],
                    "Denomination": denom,
                    "Series": row['Series'],
                    "Grade Company": row['Grade Company'],
                    "Grade": row['Grade'],
                    "Circulated/Uncirculated": row['Circulated/Uncirculated'],
                    "Notes": row['Notes'],
                    "Description": description,
                    "Starting Price": row['Starting Price'],
                    "Quantity": row['Quantity'],
                    "ListingType": row['Listing Type'],
                    "Shipping Profile Name": row['Shipping Profile Name'],
                    "Return Profile Name": row['Return Profile Name'],
                    "Payment Profile Name": row['Payment Profile Name'],
                    "ScheduleTime": str(row['ScheduleTime']),
                    "PackageLength": row['PackageLength'],
                    "PackageWidth": row['PackageWidth'],
                    "PackageDepth": row['PackageDepth'],
                    "WeightMajor": row['WeightMajor'],
                    "WeightMinor": row['WeightMinor']
                },
                "Stats": {
                    "Owner": location_code,
                    "Listed?": "Y",
                    "Date Listed": datetime.now().strftime("%Y-%m-%d"),
                    "Time Listed": datetime.now().strftime("%H:%M:%S"),
                }
            }
        }
        result.update(item_data)
        sheet.cell(row=index+5, column=21, value='N')  # Mark as listed
    # date = datetime.now().strftime("%Y/%m/%d" + "--" + "%H:%M:%S")
    
    temp_dir = os.path.join(base_dir, 'temp')
    os.makedirs(temp_dir, exist_ok=True)

    if result:  # Only write to JSON if there is data
        with open(os.path.join(temp_dir, 'temp.json'), 'w') as json_file:
            json.dump(result, json_file, indent=4)
        ic("Data extracted and saved as JSON.")
    else:
        ic("No data to save. Result is empty.")
        
    return workbook, location_code  # Return the workbook object

def load_data_into_excel(workbook, template_path):
    # Load JSON data
    temp_dir = os.path.join(base_dir, 'temp')
    os.makedirs(temp_dir, exist_ok=True)  # This should now work as expected
    temp_data_path = os.path.join(temp_dir, 'temp.json')
    photos_data_path = os.path.join(base_dir, 'photos.json')

    with open(temp_data_path, 'r') as file:
        temp_data = json.load(file)
    with open(photos_data_path, 'r') as file:
        photos_data = json.load(file)['photos']
    
    # Load the ebay template workbook
    template_workbook = load_workbook(template_path)
    sheet = template_workbook.active

    # Define starting rows and columns
    start_row = 5
    current_row = start_row

    # Map the JSON data to Excel
    for key, item in temp_data.items():
        # Use the simple SKU directly from the item dictionary
        sku = str(int(item['SKU']))  # Convert to string to ensure consistency in key usage
        photo_info = photos_data.get(sku)  # Retrieve the photo info using the SKU
        photo_url = photo_info.get('url', 'No URL found') if photo_info else 'No SKU match in photos.json'

        ## This is where the script pushes data to the payload spreadsheet
        # Set hard-coded and dynamic data in Excel
        sheet[f'A{current_row}'] = "Add"
        sheet[f'B{current_row}'] = key  # Use the complex key for column B
        sheet[f'C{current_row}'] = item['CategoryID']
        sheet[f'E{current_row}'] = item['Title']
        sheet[f'I{current_row}'] = item['Item Specifics']['Starting Price']
        sheet[f'J{current_row}'] = item['Item Specifics']['Quantity']
        sheet[f'N{current_row}'] = item['Title']
        sheet[f'O{current_row}'] = item['Item Specifics']['ListingType']
        sheet[f'P{current_row}'] = "GTC" if item['Item Specifics']['ListingType'] == "FixedPrice" else "7"
        sheet[f'V{current_row}'] = "Marietta, GA"
        sheet[f'H{current_row}'] = 0
        sheet[f'AC{current_row}'] = 3
        sheet[f'BA{current_row}'] = "Business"
        sheet[f'AH{current_row}'] = item['Item Specifics']['Shipping Profile Name']
        sheet[f'AI{current_row}'] = item['Item Specifics']['Return Profile Name']
        sheet[f'AJ{current_row}'] = item['Item Specifics']['Payment Profile Name']
        sheet[f'AV{current_row}'] = item['Item Specifics']['Grade Company']
        sheet[f'AW{current_row}'] = item['Item Specifics']['Circulated/Uncirculated']
        sheet[f'AX{current_row}'] = item['Item Specifics']['Year']
        sheet[f'AZ{current_row}'] = item['Item Specifics']['Denomination']
        sheet[f'BD{current_row}'] = item['Item Specifics']['Grade']
        sheet[f'BE{current_row}'] = item['Item Specifics']['ScheduleTime']
        sheet[f'BF{current_row}'] = item['Item Specifics']['WeightMajor']
        sheet[f'BG{current_row}'] = item['Item Specifics']['WeightMinor']
        sheet[f'BH{current_row}'] = item['Item Specifics']['PackageLength']
        sheet[f'BI{current_row}'] = item['Item Specifics']['PackageWidth']
        sheet[f'BJ{current_row}'] = item['Item Specifics']['PackageDepth']
        sheet[f'K{current_row}'] = photo_url

        print(f"Debug: Key - {key}, SKU - {sku}, Retrieved URL - {photo_url}")  # Debug output

        current_row += 1

    # Save the updated Excel file
    payload_dir = os.path.join(base_dir, 'payload')
    if not os.path.exists(payload_dir):
        os.makedirs(payload_dir, exist_ok=True)
    
    time = datetime.now().strftime("%H%M%S")
    date = datetime.now().strftime("%m%d%Y")
    
    new_filename = f"{location_code}_{date}_{time}ebayupload.xlsx"
    save_path = os.path.join(payload_dir, new_filename)
    
    template_workbook.save(save_path)
    
    ic("Data has been loaded and saved to", save_path)
    ic("File saved as: ", new_filename)

if __name__ == '__main__':
    workbook, location_code = extract_data()
    ic("Extraction Status:", workbook is not False)
    if workbook:
        template_path = os.path.join(base_dir, 'ebaytemplate.xlsx')
        load_data_into_excel(workbook, template_path)
        ic("Payload Ready! Happy ebaying :D")

