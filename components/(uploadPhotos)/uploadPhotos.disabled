import os

# Setting environment variables for the Tcl/Tk libraries
os.environ['TCL_LIBRARY'] = '/Library/Frameworks/Tcl.framework/Versions/8.6'
os.environ['TK_LIBRARY'] = '/Library/Frameworks/Tk.framework/Versions/8.6'

import platform
import json
import xml.etree.ElementTree as ET
import tkinter as tk
from tkinter import filedialog, simpledialog, messagebox
import flickrapi
import webbrowser
import os


class FlickrApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Flickr Tool")
        self.geometry("1000x600")
        
        self.api_key = '334014b6d21d5ff73d97c9bc73339b98'
        self.api_secret = 'c12f6d81faacc343'
        self.flickr = flickrapi.FlickrAPI(self.api_key, self.api_secret, format='etree')
        
        self.photos_data = {}  # Initialize the dictionary to store photo data
        
        if platform.system() == 'Darwin':  # Darwin is the system name for macOS
            self.bind('<Meta-a>', self.select_files)
        else:
            self.bind('<Control-a>', self.select_files)

        self.create_widgets()
        self.check_auth()

    def create_widgets(self):
        self.listbox = tk.Listbox(self, height=10, width=50)
        scrollbar = tk.Scrollbar(self.listbox, orient=tk.VERTICAL)
        scrollbar.pack(side='right', fill='y')
        self.listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.listbox.yview)
        self.listbox.pack(pady=20)
        self.listbox.pack_forget()  # Initially hide the listbox

        self.auth_button = tk.Button(self, text="Authenticate with Flickr", command=self.start_authentication)
        self.auth_button.pack(pady=20)

        self.file_button = tk.Button(self, text="Select Files", command=self.select_files)
        self.upload_button = tk.Button(self, text="Upload Files", command=self.upload_photo)
        self.file_button.pack(pady=10, side=tk.BOTTOM)
        self.upload_button.pack(pady=10, side=tk.BOTTOM)
        self.file_button.pack_forget()
        self.upload_button.pack_forget()

    def check_auth(self):
        if not self.flickr.token_valid(perms='write'):
            self.start_authentication()
        else:
            self.toggle_widgets(True)

    def start_authentication(self):
        self.flickr.get_request_token(oauth_callback='oob')
        authorize_url = self.flickr.auth_url(perms='write')
        webbrowser.open_new_tab(authorize_url)
        verifier = simpledialog.askstring("Verifier", "Enter the verifier code from Flickr:", parent=self)
        if verifier:
            self.flickr.get_access_token(verifier)
            self.toggle_widgets(True)

    def toggle_widgets(self, show_upload):
        if show_upload:
            self.auth_button.pack_forget()
            self.listbox.pack(pady=20)  # Show the listbox
            self.file_button.pack(side=tk.BOTTOM)
            self.upload_button.pack(side=tk.BOTTOM)
        else:
            self.listbox.pack_forget()  # Hide the listbox
            self.file_button.pack_forget()
            self.upload_button.pack_forget()
            self.auth_button.pack()

    def select_files(self):
        initial_dir = '/Users/ejrta/Pictures/Test'
        self.selected_files = filedialog.askopenfilenames(title="Choose files",
                                                        initialdir=initial_dir,
                                                        filetypes=[("JPEG files", "*.jpg;*.jpeg"), ("PNG files", "*.png"), ("All files", "*.*")])
        self.listbox.delete(0, tk.END)  # Clear existing entries in the listbox
        if self.selected_files:
            for file in self.selected_files:
                self.listbox.insert(tk.END, os.path.basename(file))
            messagebox.showinfo("Files Selected", f"{len(self.selected_files)} files have been selected.")
            
    def parse_filename(self, filename):
        # Assuming the filename format is `{prefix}#{sku}_{suffix}.jpg`
        base_name = os.path.splitext(filename)[0]  # Remove the .jpg
        parts = base_name.split('#')
        if len(parts) < 2:
            return None, None  # Not a valid format

        sku_part = parts[1]
        sku_parts = sku_part.split('_')
        if len(sku_parts) < 2:
            return None, None  # Not a valid format

        sku = sku_parts[0]
        suffix = sku_parts[1]
        return sku, suffix

    def upload_photo(self):
        # Ask the user to select a directory
        initial_dir = '/Users/ejrta/Pictures/Test'
        folder_path = filedialog.askdirectory(title="Select folder containing photos",
                                            initialdir=initial_dir)
        if not folder_path:
            return  # User cancelled the operation

        # Define the file types you want to process
        valid_extensions = ('.jpg', '.jpeg', '.png')

        # List all files in the selected directory that match the valid file types
        files_to_upload = [os.path.join(folder_path, f) for f in os.listdir(folder_path)
                        if os.path.isfile(os.path.join(folder_path, f)) and f.lower().endswith(valid_extensions)]

        # Process each file in the list
        for file_path in files_to_upload:
            filename = os.path.basename(file_path)
            sku, suffix = self.parse_filename(filename)
            if sku and suffix:
                try:
                    response = self.flickr.upload(filename=file_path, title=filename)
                    photo_id = response.find('photoid').text
                    url = self.retrieve_photo_url(photo_id)
                    self.add_photo_data(sku, suffix, url)
                    print(f"Uploaded {filename} successfully!")
                except Exception as e:
                    print("Failed to upload", filename, "Error:", e)

        self.write_json()

    def retrieve_photo_url(self, photo_id):
        # Fetch the URL; this assumes you can directly get the URL from the API response
        sizes = self.flickr.photos.getSizes(photo_id=photo_id)
        url = sizes.find('.//size[@label="Original"]').get('source')
        return url

    def add_photo_data(self, sku, suffix, url):
        if sku not in self.photos_data:
            self.photos_data[sku] = []
        self.photos_data[sku].append((str(suffix), url))  # Store with suffix for sorting

    def write_json(self):
        # Organize and write to JSON
        organized_data = {}
        for sku, urls in self.photos_data.items():
            sorted_urls = sorted(urls, key=lambda x: x[0])  # Sort by suffix
            organized_data[sku] = {'url': '|'.join([url for _, url in sorted_urls])}

        # Absolute path to save photos.json
        target_path = '/Users/ejrta/Documents/Coding Folders/Scripts and Macros/Tools and Workflow Scripts/Flickr&Ebay/components/(extract)/photos.json'

        # Check if the target directory exists and create it if not
        target_directory = os.path.dirname(target_path)
        if not os.path.exists(target_directory):
            os.makedirs(target_directory)

        with open(target_path, 'w') as json_file:
            json.dump({'photos': organized_data}, json_file, indent=4)

        print(f"Photos JSON saved to {target_path}")

if __name__ == '__main__':
    app = FlickrApp()
    app.mainloop()
